package discord4j.discordjson.json;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import discord4j.discordjson.Id;
import discord4j.discordjson.possible.Possible;
import org.immutables.value.Value;

import java.util.List;
import java.util.Optional;

@Value.Immutable
@JsonSerialize(as = ImmutableMessageData.class)
@JsonDeserialize(as = ImmutableMessageData.class)
public interface MessageData {

    static ImmutableMessageData.Builder builder() {
        return ImmutableMessageData.builder();
    }

    /** id of the message */
    Id id();

    /** id of the channel the message was sent in */
    @JsonProperty("channel_id")
    Id channelId();

    /** the author of this message (not guaranteed to be a valid user, see below) */
    UserData author();

    /** contents of the message */
    String content();

    /** when this message was sent */
    String timestamp();

    /** when this message was edited (or null if never) */
    @JsonProperty("edited_timestamp")
    Optional<String> editedTimestamp();

    /** whether this was a TTS message */
    boolean tts();

    /** whether this message mentions everyone */
    @JsonProperty("mention_everyone")
    boolean mentionEveryone();

    /** users specifically mentioned in the message */
    List<UserData> mentions();

    /** roles specifically mentioned in this message */
    @JsonProperty("mention_roles")
    List<Id> mentionRoles();

    /** channels specifically mentioned in this message */
    @JsonProperty("mention_channels")
    Possible<List<ChannelMentionData>> mentionChannels();

    /** any attached files */
    List<AttachmentData> attachments();

    /** any embedded content */
    List<EmbedData> embeds();

    /** reactions to the message */
    Possible<List<ReactionData>> reactions();

    /** used for validating a message was sent */
    Possible<Object> nonce();

    /** whether this message is pinned */
    boolean pinned();

    /** if the message is generated by a webhook, this is the webhook's id */
    @JsonProperty("webhook_id")
    Possible<Id> webhookId();

    /** type of message */
    int type();

    /** sent with Rich Presence-related chat embeds */
    Possible<MessageActivityData> activity();

    /** sent with Rich Presence-related chat embeds */
    Possible<ApplicationData> application();

    /** if the message is an Interaction or application-owned webhook, this is the id of the application */
    @JsonProperty("application_id")
    Possible<Id> applicationId();

    /** data showing the source of a crosspost, channel follow add, pin, or reply message */
    @JsonProperty("message_reference")
    Possible<MessageReferenceData> messageReference();

    /** message flags combined as a bitfield */
    Possible<Integer> flags();

    /** the message associated with the message_reference */
    @JsonProperty("referenced_message")
    Possible<Optional<MessageData>> referencedMessage();

    /** sent if the message is a response to an Interaction */
    Possible<MessageInteractionData> interaction();

    /** sent if the message contains components like buttons, action rows, or other interactive components */
    Possible<List<ComponentData>> components();

    /** sent if the message contains stickers */
    @JsonProperty("sticker_items")
    Possible<List<StickerItemData>> stickerItems();

    /** the stickers sent with the message */
    @Deprecated
    Possible<List<StickerData>> stickers();

    /**
     * 	A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the
     * 	message in a thread, it can be used to estimate the relative position of the message in a thread in company with
     * 	total_message_sent on parent thread
     */
    Possible<Integer> position();

    /** data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message */
    @JsonProperty("role_subscription_data")
    Possible<RoleSubscriptionDataData> roleSubscriptionData();
}
